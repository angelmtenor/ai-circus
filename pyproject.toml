# Project metadata and configuration for the AI Circus project
# Author: Angel Martinez-Tenor, 2025. Adapted from https://github.com/angelmtenor/ds-template

[project]
name = "ai-circus"
version = "0.1.0" # Initial version, follow semantic versioning (e.g., MAJOR.MINOR.PATCH)
description = "Smart AI Building Block for innovative applications." # A concise summary of your project
readme = "README.md" # Path to your project's README file
requires-python = ">=3.13" # Specifies the minimum Python version required. Python 3.13 is recent (as of 2025).
license = { text = "MIT" } # Or use { file = "LICENSE.md" } if you have a separate license file
authors = [
    { name = "Angel Martinez-Tenor", email = "angelmtenor@gmail.com" },
    # Add other authors here if any
]
keywords = [ # Keywords for PyPI to help users find your project
    "ai",
    "machine learning",
    "deep learning",
    "neural networks",
    "building block",
    "smart systems",
    "python",
]
classifiers = [ # PyPI classifiers: https://pypi.org/classifiers/
    "Development Status :: 3 - Alpha", # Or "4 - Beta", "5 - Production/Stable"
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    # Add other Python versions supported, e.g., "Programming Language :: Python :: 3.14" when available
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core project dependencies
dependencies = [
    "httpx>=0.28.1",        # HTTP client.
    "loguru>=0.7.3",        # Logging library.
    "psutil>=7.0.0",        # System utilities.
    "py-cpuinfo>=9.0.0",    # CPU info library.
    "python-dotenv>=1.1.0", # .env file management.
]

[project.urls] # Useful links for your project
"Homepage" = "https://github.com/angelmtenor/ai-circus"          # Replace with your project's homepage URL
"Repository" = "https://github.com/angelmtenor/ai-circus"        # Replace with your project's repository URL
"Documentation" = "https://angelmtenor.github.io/ai-circus"      # Replace with your project's documentation URL (if any)
"Bug Tracker" = "https://github.com/angelmtenor/ai-circus/issues" # Replace with your project's issue tracker URL



# Optional dependencies (can be installed with `pip install .[group_name]`)
[project.optional-dependencies]
optional = []

# Example for a "docs" group:
# docs = [
#   "sphinx>=7.0.0", # Or your preferred documentation generator
#   "sphinx-rtd-theme>=2.0.0",
#   "myst-parser>=2.0.0", # For Markdown support in Sphinx
# ]
# Example for a "serving" group if your AI model needs a specific server:
# serving = [
#   "fastapi>=0.100.0",
#   "uvicorn[standard]>=0.20.0",
# ]

 # Dependencies for development (testing, linting, formatting, building)
[dependency-groups]
dev = [
    "bandit>=1.8.3",        # Security linter.
    "debugpy>=1.8.14",      # Python debugger.
    "jupyter>=1.1.1",       # For notebooks.
    "pre-commit>=4.2.0",    # Git pre-commit hooks.
    "pyinstrument>=5.0.1",  # Profiler.
    "pyright>=1.1.400",     # Static type checker.
    "pytest>=8.3.5",        # Testing framework.
    "pytest-cov>=6.1.1",    # Pytest coverage plugin.
    "ruff>=0.11.8",         # Linter and formatter.
    "twine>=6.1.0",         # For uploading packages to PyPI.
]

[build-system] # Specifies how to build your project
requires = ["hatchling"] # Or "setuptools>=61", "wheel", "poetry-core", "flit_core"
build-backend = "hatchling.build" # Or "setuptools.build_meta", "poetry.core.masonry.api", "flit_core.buildapi"
backend-path = ["."] # Optional: if backend is in a subfolder

# Pyright configuration (static type checker)
# For details: https://github.com/microsoft/pyright/blob/main/docs/configuration.md
[tool.pyright]
# venv and venvPath are often auto-detected, but explicit is fine.
# venv = ".venv" # Name of the virtual environment directory
# venvPath = "."   # Path to the project root where venv is located

exclude = [ # Paths to exclude from type checking
    "**/node_modules",
    "**/__pycache__",
    "**/.git",
    "**/.hg",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.ruff_cache",
    "**/.tox",
    "**/.venv", # Default virtual environment directory
    "**/build",
    "**/dist",
    "**/docs/_build", # Built documentation
    "**/notebooks_extra", # User's original exclusion
    # Add other paths like "**/typings_removed/" if applicable
]
typeCheckingMode = "standard" # Options: "off", "basic", "standard", "strict". "standard" or "strict" recommended for new projects.
# reportMissingTypeStubs = false # Set to true if you want to know about missing stubs for third-party libraries.
# reportUnusedVariable = "warning" # Or "error", "information", "none"
# reportImportCycles = "warning"

# Ruff configuration (linter and formatter)
# For details: https://docs.astral.sh/ruff/configuration/
[tool.ruff]
line-length = 120 # Maximum line length
target-version = "py313" # Target Python version for Ruff's rules and fixes (should match requires-python)
extend-exclude = [ # Paths to exclude from linting and formatting
    ".venv",
    "build",
    "dist",
    "notebooks_extra", # User's original exclusion
    # Add other paths here
]

[tool.ruff.format]
quote-style = "double" # "double" or "single"
indent-style = "space" # "space" or "tab"
skip-magic-trailing-comma = false # If true, skip trailing comma for hug or magic trailing comma.
docstring-code-format = true # Format code examples in docstrings.
docstring-code-line-length = "dynamic" # Line length for docstring code.

[tool.ruff.lint]
select = [ # List of rule codes/prefixes to enable
    "ANN",  # Type annotations
    "F",    # Pyflakes: Logical errors
    "E",    # Pycodestyle: Style errors (PEP 8)
    "W",    # Pycodestyle: Style warnings (PEP 8)
    "D",    # pydocstyle: Docstring conventions
    "B",    # flake8-bugbear: Potential bugs and design problems
    "I",    # isort: Import sorting
    "N",    # PEP8 Naming: Naming conventions
    "UP",   # pyupgrade: Python syntax upgrades
    "C90",  # mccabe: Code complexity
    "Q",    # flake8-quotes: Quote consistency
    "SIM",  # flake8-simplify: Simplification opportunities
    "PT",   # flake8-pytest-style: Pytest style conventions
    "T20",  # flake8-print: Discourage `print` calls in library code (T201, T203)
    "FURB", # refurb: Modernize Python code
    # "RUF",  # Ruff-specific rules (often very useful, e.g., RUF001-RUF003 for ambiguous unicode)
    # Consider adding more specific rules or prefixes based on project needs:
    # "A", "ANN", "ARG", "BLE", "COM", "ERA", "EXE", "FA", "FURB", "G", "ICN", "ISC",
    # "LOG", "PERF", "PGH", "PIE", "PL", "PTH", "RET", "RSE", "S", "SLF", "SLOT",
    # "TCH", "TID", "TRY", "YTT"
]
ignore = [ # List of rule codes/prefixes to ignore globally
    "B007",   # Unused loop variable (if intentionally unused, e.g., for side-effects)
    "B008",   # Do not perform function calls in argument defaults (can be a false positive with dependency injection or specific APIs)
    "C901",   # Function is too complex (try to refactor, but can be ignored for specific complex functions)
    "D105",   # Missing docstring in magic method (e.g., simple `__init__`, `__repr__`)
    "D203",   # One blank line required before class docstring (often conflicts with D211)
    "D205",   # One blank line required between summary line and description (often conflicts with D212)
    "D212",   # Multi-line docstring summary should start at the first line (often conflicts with D213)
    "D415",   # First line should end with a period, question mark, or exclamation point (style preference)
    "E501",   # Line too long (handled by formatter, but linter might still warn if formatter is off for some reason)
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    # "ANN101", # Missing type annotation for `self` in method
    # "ANN102", # Missing type annotation for `cls` in classmethod
]
# fixable = ["ALL"] # Enable all fixable rules for auto-fixing
# unfixable = [] # Specify rules that should not be auto-fixed

[tool.ruff.lint.per-file-ignores] # Ignore rules for specific files/paths
"**/notebooks_extra/**" = ["ALL"] # Disable all linting for exploratory notebooks
"**.ipynb" = [ # Specific ignores for Jupyter notebooks
    "E501", # Line too long
    "D100", # Missing docstring in public module
    "D103", # Missing docstring in public function
    "D101", # Missing docstring in public class
    "E402", # Module level import not at top of file
    "I002", # Missing required import `__future__.annotations`
    "T201", # print found (print is common in notebooks for quick output)
]
"**/__init__.py" = [
    "D104", # Missing docstring in public package
    "F401", # `module` imported but unused (common for re-exporting or namespace packages)
]
"tests/**" = [ # Specific ignores for test files
    "S101",   # `assert` used (expected in tests)
    "D103",   # Missing docstring in public function (test function names are often descriptive enough)
    "D100",   # Missing docstring in public module (for test modules)
    "D104",   # Missing docstring in public package (for test packages)
    "SLF001", # Private member accessed (sometimes necessary for testing internal state)
    "B018",   # Found useless expression (can happen with some pytest.raises patterns)
]

[tool.ruff.lint.pydocstyle]
convention = "google" # "google", "numpy", or "pep257". Ensure your docstrings follow this.

# Bandit configuration (security linter)
# For details: https://bandit.readthedocs.io/en/latest/config.html
[tool.bandit]
skips = [ # List of test IDs to skip
    "B101", # assert_used: Assert statements are fine for tests and runtime checks if not disabled.
    "B104", # hardcoded_bind_all_interfaces: Check if this is relevant for your application.
    "B301", # pickle: Use of pickle, ensure it's from trusted sources if used.
    "B403", # import_pickle: Use of `_pickle` module.
    "B404", # import_subprocess: Use of `subprocess` module (ensure it's used safely).
    "B602", # subprocess_popen_with_shell_equals_true: `subprocess.Popen` with `shell=True` is dangerous.
    "B603", # subprocess_without_shell_equals_true: `subprocess` call with `shell=True` is dangerous.
    "B607", # start_process_with_a_shell: Starting a process with a shell is dangerous.
    "B608", # hardcoded_sql_expressions: Check if relevant; prefer ORMs or parameterized queries.
]
targets = ["src", "tests"] # Specify directories to scan. Assuming your code is in 'src/'.
exclude_dirs = [".venv", "build", "dist", "notebooks_extra", "tests/fixtures"] # Exclude directories
# confidence_level = "MEDIUM" # "LOW", "MEDIUM", "HIGH" - report issues with this level or higher
# severity_level = "LOW"    # "LOW", "MEDIUM", "HIGH" - report issues with this level or higher

# Pytest configuration
# For details: https://docs.pytest.org/en/stable/reference/reference.html#configuration-options
[tool.pytest.ini_options]
minversion = "7.0" # Minimum pytest version required
addopts = [ # Additional command-line options for pytest
    "--cov=src", # Measure coverage for the 'src' directory (adjust if your code is elsewhere, e.g. project_name)
    "--cov-report=html", # Generate HTML coverage report
    "--cov-report=xml",  # Generate XML coverage report (for CI systems)
    "--cov-fail-under=80", # Fail if test coverage is below 80%
    "-ra", # Show extra test summary information for (a)ll except passes
    "-q",  # Quieter output
    # "--strict-markers", # Markers not defined in `markers` will raise an error
    # "--durations=10", # Show the 10 slowest tests
]
testpaths = ["tests"] # Directory where tests are located
python_files = "test_*.py tests_*.py *_test.py" # Glob patterns for test files
python_classes = "*Test Test* Describe*" # Prefixes or glob patterns for test classes
python_functions = "test_* it_* should_* scenario_*" # Prefixes or glob patterns for test functions

# markers = [ # Define custom markers to prevent typos and warnings
#   "slow: marks tests as slow to run",
#   "integration: marks integration tests",
# ]
# filterwarnings = [ # Manage warnings during test execution
#     "error", # Treat all warnings as errors
#     "ignore::DeprecationWarning", # Example: ignore all deprecation warnings
# ]
